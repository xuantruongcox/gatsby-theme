{"version":3,"file":"component---gatsby-theme-events-src-templates-event-js-7f3f881c6c66dd5c24b2.js","mappings":"sKAEA,MAAMA,EAAU,SAACC,EAAIC,GAAA,IAAE,IAAEC,GAAM,EAAI,MAAEC,GAAQ,EAAI,KAAEC,GAAO,QAAM,IAAAH,EAAG,CAAC,EAACA,EAAA,OACnED,EAAKK,mBAAmB,QAAS,CAC/BH,IAAKA,EAAM,eAAYI,EACvBH,MAAOA,EAAQ,YAASG,EACxBF,KAAMA,EAAO,eAAYE,GACxB,EACCC,EAAYC,IAA6B,IAA5B,UAAEC,EAAS,QAAEC,GAASF,EACvC,MAAMG,EAAQ,IAAIC,KAAKH,GACjBI,EAAM,IAAID,KAAKF,GACfI,EAAWH,EAAMI,iBAAmBF,EAAIE,eAE9C,OACEC,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,QAAMC,SAAUN,EAAMO,eACnBnB,EAAQY,EAAO,CAAEP,KAAMU,MAExBA,GACAE,EAAAA,cAAAA,EAAAA,SAAA,KAAE,IAEAA,EAAAA,cAAA,QAAMC,SAAUJ,EAAIK,eACjBnB,EAAQc,EAAK,CAAEV,MAAOQ,EAAMQ,aAAeN,EAAIM,eAIrD,EAkBP,MAdcC,IAAA,IAAC,KAAEC,EAAI,SAAEC,EAAQ,IAAEC,EAAG,UAAEd,EAAS,QAAEC,GAASU,EAAA,OACxDJ,EAAAA,cAAA,WACEA,EAAAA,cAAA,UACGK,EAAK,KAAGC,EAAS,KAEpBN,EAAAA,cAAA,SACEA,EAAAA,cAACT,EAAS,CAACE,UAAWA,EAAWC,QAASA,KAE5CM,EAAAA,cAAA,SAAG,YACQA,EAAAA,cAAA,KAAGQ,KAAMD,GAAMA,IAEtB,ECjBR,MANsBf,IAAA,IAAEiB,MAAM,MAACC,IAAOlB,EAAA,OAClCQ,EAAAA,cAACW,EAAAA,EAAM,KACHX,EAAAA,cAACY,EAAUF,GACN,C","sources":["webpack://site/../gatsby-theme-events/src/components/event.js","webpack://site/../gatsby-theme-events/src/templates/event.js"],"sourcesContent":["import React from \"react\";\n\nconst getDate = (date, { day = true, month = true, year = true } = {}) =>\n  date.toLocaleDateString(\"en-US\", {\n    day: day ? \"numeric\" : undefined,\n    month: month ? \"long\" : undefined,\n    year: year ? \"numeric\" : undefined,\n  });\nconst EventDate = ({ startDate, endDate }) => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const isOneDay = start.toDateString() === end.toDateString();\n\n  return (\n    <>\n      <time dateTime={start.toISOString()}>\n        {getDate(start, { year: isOneDay })}\n      </time>\n      {!isOneDay && (\n        <>\n          -\n          <time dateTime={end.toISOString()}>\n            {getDate(end, { month: start.getMonth() !== end.getMonth() })}\n          </time>\n        </>\n      )}\n    </>\n  );\n};\n\nconst Event = ({ name, location, url, startDate, endDate }) => (\n  <div>\n    <h2>\n      {name} ({location})\n    </h2>\n    <p>\n      <EventDate startDate={startDate} endDate={endDate} />\n    </p>\n    <p>\n      Website: <a href={url}>{url}</a>\n    </p>\n  </div>\n);\n\nexport default Event;\n","import React from 'react';\nimport {graphql} from 'gatsby';\nimport Layout from '../components/layout';\nimport Event from '../components/event';\n\nexport const query = graphql`\n    query($eventID: String!){\n        event(id: {eq: $eventID}){\n            name\n            url\n            startDate(formatString: \"MMMM DD YYYY\")\n            endDate(formatString: \"MMMM DD YYYY\")\n            location\n            slug\n        }\n    }\n`\n\nconst EventTemplate = ({data: {event}}) => (\n    <Layout>\n        <Event {...event}/>\n    </Layout>\n)\n\nexport default EventTemplate"],"names":["getDate","date","_temp","day","month","year","toLocaleDateString","undefined","EventDate","_ref","startDate","endDate","start","Date","end","isOneDay","toDateString","React","dateTime","toISOString","getMonth","_ref2","name","location","url","href","data","event","Layout","Event"],"sourceRoot":""}